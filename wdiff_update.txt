Parameterized classes [-are still pretty new. They-] were [-only-] added to Puppet in version 2.6.0. [-Yet they have changed the landscape of Puppet in ways that aren't immediately obvious.-] You [-probably have noticed-] {+may find some of their effects suprising.

Notice+} that the examples in this chapter {+all+} use [-the-] resource-like [-declaration syntax-] {+declarations+} instead of the [-include-] {+`include`+} function. [-That's because include doesn't work with parameterized classes, and likely never will. The problem is that the whole point-] {+Use+} of [-include-] {+`include`+} conflicts with the idea that a class [-can change depending on how-] {+is completely defined by+} its [-declared. If you declare-] {+declaration --+} a {+single+} class {+with+} multiple [-times and the attributes don't match precisely, which set of attributes wins?-] {+definitions has ambiguous attributes. For that reason, we do not implement `include` in parameterized classes.+}

Parameterized classes [-made the-] {+make this+} problem [-with that paradigm-] more [-explicit,-] {+obvious,+} but it [-already-] {+has always+} existed. [-It was possible to run afoul of it without even noticing.-] A common pattern for passing information into a class [-was-] {+is+} to [-choose-] {+retrieve+} an external variable [-and have the class retrieve it-] with dynamically-scoped [-variable-] lookup. If [-you were also having low-level classes manage their own dependencies by including anything they might need than-] a [-given-] {+low-level+} class {+manages its own dependences through includes, it+} might have [-several potential-] {+multiple+} scope chains resolving to different values. [-This would result in a race: whichever-] {+The+} include [-took-] {+that takes+} effect first [-would determined-] {+determines+} the behavior of the class. {+It is difficult to determine which includes are functional and which have been ignored.+}
